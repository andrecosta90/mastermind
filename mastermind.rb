# frozen_string_literal: true

require './player'

# Mastermind game logic.
# This class represents the core logic of the Mastermind game, including methods for
# calculating fitness, running the game rounds, and collecting feedback on guesses.
class Mastermind
  attr_reader :n_rounds, :n_colors, :n_holes

  def initialize(n_rounds, n_colors, n_holes)
    @n_rounds = n_rounds
    @n_colors = n_colors
    @n_holes = n_holes
  end

  # Calculates the fitness of a guess compared to the secret code.
  #
  # @param guess_code [Array<String>] The guess code provided by the codebreaker.
  # @param secret_code [Array<String>] The secret code generated by the codemaker.
  # @return [Array<Integer>] An array representing the feedback on the guess.
  def fitness(guess_code, secret_code)
    inventory = secret_code.tally
    scores = []

    collect_correct_position(guess_code, secret_code, scores, inventory)
    collect_wrong_position(guess_code, secret_code, scores, inventory)

    scores.sort.reverse
  end

  # Runs the Mastermind game.
  #
  # @param codemaker [Player] The codemaker who generates the secret code.
  # @param codebreaker [Player] The codebreaker who makes guesses.
  def run(codemaker, codebreaker)
    secret_code = codemaker.create_secret_code
    (1..n_rounds).each do |round|
      puts "Round #{round} - Make a guess:"

      guess_code = codebreaker.make_guess
      score = fitness(guess_code, secret_code)

      puts "Guess: #{guess_code}\nFeedback :\n#{feedback_message(score)}\n\n"
      codebreaker.memory_update!(guess_code, score)

      break puts 'WINNER!' if guess_code == secret_code
    end

    puts "SECRET CODE = #{secret_code}\n\n"
  end

  private

  def custom_push(scores, value, inventory, item)
    inventory[item] -= 1
    scores.push(value)
  end

  def collect_correct_position(guess_code, secret_code, scores, inventory)
    guess_code.each_with_index do |item, index|
      custom_push(scores, 2, inventory, item) if item == secret_code[index]
    end
  end

  def collect_wrong_position(guess_code, secret_code, scores, inventory)
    guess_code.each_with_index do |item, index|
      if item != secret_code[index] && secret_code.include?(item) && (inventory[item]).positive?
        custom_push(scores, 1, inventory, item)
      end
    end
  end

  def feedback_message(score)
    score.tally.map do |k, v|
      k == 2 ? "  * (#{v}) - Correct value and position" : "  * (#{v}) - Correct value but incorrect position"
    end.join("\n")
  end
end
